apiVersion: v1
kind: Namespace
metadata:
  name: aaas
  labels:
    name: aaas
    environment: production
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aaas-config
  namespace: aaas
data:
  ENVIRONMENT: "production"
  HOST: "0.0.0.0"
  PORT: "8000"
  LOG_LEVEL: "INFO"
  MAX_AGENTS: "50"
  MIN_AGENTS: "3"
  AGENT_TIMEOUT: "3600"
  AGENT_IDLE_TIMEOUT: "300"
  ENABLE_AUTOSCALING: "true"
  ENABLE_HEALTH_MONITORING: "true"
  ENABLE_IDLE_SHUTDOWN: "true"
  ENABLE_AUTO_RECOVERY: "true"
  SCALE_UP_THRESHOLD: "0.8"
  SCALE_DOWN_THRESHOLD: "0.3"
  HEALTH_CHECK_INTERVAL: "30"
  MAX_RECOVERY_ATTEMPTS: "3"
  RECOVERY_BACKOFF_SECONDS: "5"
  METRICS_ENABLED: "true"
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_PER_MINUTE: "60"
  RATE_LIMIT_AGENT_CREATION: "10"
  REQUIRE_API_KEY: "true"
---
apiVersion: v1
kind: Secret
metadata:
  name: aaas-secrets
  namespace: aaas
type: Opaque
stringData:
  ANTHROPIC_API_KEY: "your-anthropic-api-key-here"  # Replace with actual key
  API_KEY: "your-aaas-api-key-here"  # Replace with actual key
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aaas-deployment
  namespace: aaas
  labels:
    app: aaas
    version: v2.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: aaas
  template:
    metadata:
      labels:
        app: aaas
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: aaas-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      containers:
      - name: aaas
        image: ghcr.io/wilbtc/agent-as-service:latest
        imagePullPolicy: Always

        ports:
        - name: http
          containerPort: 8000
          protocol: TCP

        env:
        - name: ANTHROPIC_API_KEY
          valueFrom:
            secretKeyRef:
              name: aaas-secrets
              key: ANTHROPIC_API_KEY
        - name: API_KEY
          valueFrom:
            secretKeyRef:
              name: aaas-secrets
              key: API_KEY

        envFrom:
        - configMapRef:
            name: aaas-config

        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2

        volumeMounts:
        - name: agent-workdir
          mountPath: /tmp/aaas-agents
        - name: data
          mountPath: /app/data
        - name: logs
          mountPath: /app/logs

      volumes:
      - name: agent-workdir
        emptyDir: {}
      - name: data
        persistentVolumeClaim:
          claimName: aaas-data-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: aaas-logs-pvc

      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - aaas
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: aaas-service
  namespace: aaas
  labels:
    app: aaas
spec:
  type: LoadBalancer
  selector:
    app: aaas
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8000
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
---
apiVersion: v1
kind: Service
metadata:
  name: aaas-service-internal
  namespace: aaas
  labels:
    app: aaas
spec:
  type: ClusterIP
  selector:
    app: aaas
  ports:
    - name: http
      protocol: TCP
      port: 8000
      targetPort: 8000
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: aaas-hpa
  namespace: aaas
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: aaas-deployment
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: aaas-data-pvc
  namespace: aaas
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: aaas-logs-pvc
  namespace: aaas
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: standard
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aaas-service-account
  namespace: aaas
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: aaas-pdb
  namespace: aaas
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: aaas
