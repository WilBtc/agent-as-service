version: '3.8'

services:
  # ========================================
  # PostgreSQL Database
  # ========================================
  postgres:
    image: postgres:15-alpine
    container_name: aaas-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aaas
      POSTGRES_USER: aaas
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-changeme}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aaas"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aaas-network

  # ========================================
  # Redis Cache
  # ========================================
  redis:
    image: redis:7-alpine
    container_name: aaas-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aaas-network

  # ========================================
  # Agent as a Service API
  # ========================================
  aaas-api:
    build:
      context: .
      dockerfile: Dockerfile
    image: aaas:latest
    container_name: aaas-api
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Application
      ENVIRONMENT: production
      HOST: 0.0.0.0
      PORT: 8000
      API_PREFIX: /api/v1

      # Claude Configuration
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      CLAUDE_MODEL: claude-sonnet-4-5-20250929

      # Database
      DATABASE_URL: postgresql://aaas:${POSTGRES_PASSWORD:-changeme}@postgres:5432/aaas

      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0

      # Security
      API_KEY: ${AAAS_API_KEY}
      REQUIRE_API_KEY: "true"

      # Agent Configuration
      MAX_AGENTS: 50
      MIN_AGENTS: 3
      AGENT_TIMEOUT: 3600
      AGENT_IDLE_TIMEOUT: 300

      # Auto-scaling
      ENABLE_AUTOSCALING: "true"
      SCALE_UP_THRESHOLD: 0.8
      SCALE_DOWN_THRESHOLD: 0.3

      # Health Monitoring
      ENABLE_HEALTH_MONITORING: "true"
      HEALTH_CHECK_INTERVAL: 30
      ENABLE_AUTO_RECOVERY: "true"
      MAX_RECOVERY_ATTEMPTS: 3

      # Metrics
      METRICS_ENABLED: "true"
      METRICS_PORT: 9090

      # Rate Limiting
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_PER_MINUTE: 100

      # Logging
      LOG_LEVEL: INFO
      LOG_FORMAT: json
    volumes:
      - aaas_data:/app/data
      - aaas_logs:/app/logs
      - /var/run/docker.sock:/var/run/docker.sock  # For Docker-in-Docker if needed
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - aaas-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # ========================================
  # Prometheus - Metrics Collection
  # ========================================
  prometheus:
    image: prom/prometheus:latest
    container_name: aaas-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    depends_on:
      - aaas-api
    networks:
      - aaas-network

  # ========================================
  # Grafana - Metrics Visualization
  # ========================================
  grafana:
    image: grafana/grafana:latest
    container_name: aaas-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: http://localhost:3000
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - aaas-network

  # ========================================
  # Nginx - Reverse Proxy & Load Balancer
  # ========================================
  nginx:
    image: nginx:alpine
    container_name: aaas-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl  # SSL certificates
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - aaas-api
    networks:
      - aaas-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ========================================
  # Node Exporter - System Metrics
  # ========================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: aaas-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - aaas-network

  # ========================================
  # Alertmanager - Alert Management
  # ========================================
  alertmanager:
    image: prom/alertmanager:latest
    container_name: aaas-alertmanager
    restart: unless-stopped
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - aaas-network

# ========================================
# Volumes
# ========================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  aaas_data:
    driver: local
  aaas_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local
  nginx_logs:
    driver: local

# ========================================
# Networks
# ========================================
networks:
  aaas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16
